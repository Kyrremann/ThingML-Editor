
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Wed Sep 05 16:32:16 CEST 2012
//----------------------------------------------------

package org.fife.rsta.ac.thingml.thingmlparser;

import java_cup.runtime.*;
import java.util.*;

import org.fife.rsta.ac.thingml.syntaxtree.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Wed Sep 05 16:32:16 CEST 2012
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\011\000\002\002\003\000\002\002\004\000\002\003" +
    "\007\000\002\004\002\000\002\004\005\000\002\004\005" +
    "\000\002\004\010\000\002\005\002\000\002\005\010" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\033\000\004\004\006\001\002\000\004\002\001\001" +
    "\002\000\004\002\035\001\002\000\004\016\007\001\002" +
    "\000\004\010\010\001\002\000\012\005\013\006\012\007" +
    "\014\011\ufffe\001\002\000\004\011\034\001\002\000\004" +
    "\016\032\001\002\000\004\016\017\001\002\000\004\016" +
    "\015\001\002\000\012\005\013\006\012\007\014\011\ufffe" +
    "\001\002\000\004\011\ufffc\001\002\000\004\010\020\001" +
    "\002\000\006\011\ufffa\014\021\001\002\000\004\012\025" +
    "\001\002\000\004\011\023\001\002\000\012\005\013\006" +
    "\012\007\014\011\ufffe\001\002\000\004\011\ufffb\001\002" +
    "\000\004\015\026\001\002\000\004\013\027\001\002\000" +
    "\004\016\030\001\002\000\006\011\ufffa\014\021\001\002" +
    "\000\004\011\ufff9\001\002\000\012\005\013\006\012\007" +
    "\014\011\ufffe\001\002\000\004\011\ufffd\001\002\000\004" +
    "\002\uffff\001\002\000\004\002\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\033\000\006\002\004\003\003\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\004\010\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\004\015" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\005" +
    "\021\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\004\023\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\005\030\001\001" +
    "\000\002\001\001\000\004\004\032\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




       public int errorLine;
       public int errorColumn;
       public String errorValue;

       public void syntax_error(Symbol cur_token) {
       	       errorLine = cur_token.left;
	       errorColumn = cur_token.right;
	       errorValue = (String) cur_token.value;

	       report_error("Syntax error at line " + (cur_token.left+1) +
	       ", column " + cur_token.right + ". Problem is " + cur_token.value, null);
       }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // transition ::= TRANS LPAR INT_LITERAL RPAR ID transition 
            {
              Transition RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int nextleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nextright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Transition next = (Transition)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Transition(i, name, next, nameright, iright, nameleft); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("transition",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // transition ::= 
            {
              Transition RESULT =null;
		 RESULT = null; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("transition",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // states ::= STATE ID LBRACK transition RBRACK states 
            {
              States RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Transition t = (Transition)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int nextleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nextright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		States next = (States)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new State(name, t, next, nameright, nameleft); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("states",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // states ::= FINAL ID states 
            {
              States RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int nextleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nextright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		States next = (States)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new FinalState(name, next, nameright, nameleft); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("states",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // states ::= INIT ID states 
            {
              States RESULT =null;
		int testleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int testright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object test = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int nextleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nextright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		States next = (States)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new InitState(name, next, nameright, nameleft); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("states",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // states ::= 
            {
              States RESULT =null;
		 RESULT = null; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("states",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // stateMachine ::= STATEMACHINE ID LBRACK states RBRACK 
            {
              StateMachine RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		States s = (States)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int testleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int testright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object test = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new StateMachine(name, s, nameright, nameleft); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stateMachine",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Program start_val = (Program)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // program ::= stateMachine 
            {
              Program RESULT =null;
		int smleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int smright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		StateMachine sm = (StateMachine)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Program(sm); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

