/* The following code was generated by JFlex 1.4.3 on 16.05.12 22:50 */

/*
 * 16/05/2012
 *
 * ThingMLTokenMaker.java - Scanner for the Java programming language.
 * 
 * This library is distributed under a modified BSD license.  See the included
 * RSyntaxTextArea.License.txt file for details.
 */
package org.fife.ui.rsyntaxtextarea.modes;

import java.io.*;
import javax.swing.text.Segment;

import org.fife.ui.rsyntaxtextarea.*;


/**
 * Scanner for the ThingML programming language.<p>
 *
 * This implementation was created using
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.1; however, the generated file
 * was modified for performance.  Memory allocation needs to be almost
 * completely removed to be competitive with the handwritten lexers (subclasses
 * of <code>AbstractTokenMaker</code>, so this class has been modified so that
 * Strings are never allocated (via yytext()), and the scanner never has to
 * worry about refilling its buffer (needlessly copying chars around).
 * We can achieve this because RText always scans exactly 1 line of tokens at a
 * time, and hands the scanner this line as an array of characters (a Segment
 * really).  Since tokens contain pointers to char arrays instead of Strings
 * holding their contents, there is no need for allocating new memory for
 * Strings.<p>
 *
 * The actual algorithm generated for scanning has, of course, not been
 * modified.<p>
 *
 * If you wish to regenerate this file yourself, keep in mind the following:
 * <ul>
 *   <li>The generated JavaTokenMaker.java</code> file will contain two
 *       definitions of both <code>zzRefill</code> and <code>yyreset</code>.
 *       You should hand-delete the second of each definition (the ones
 *       generated by the lexer), as these generated methods modify the input
 *       buffer, which we'll never have to do.</li>
 *   <li>You should also change the declaration/definition of zzBuffer to NOT
 *       be initialized.  This is a needless memory allocation for us since we
 *       will be pointing the array somewhere else anyway.</li>
 *   <li>You should NOT call <code>yylex()</code> on the generated scanner
 *       directly; rather, you should use <code>getTokenList</code> as you would
 *       with any other <code>TokenMaker</code> instance.</li>
 * </ul>
 *
 * @author Robert Futrell
 * @version 0.5
 *
 */

public class ThingMLTokenMaker extends AbstractJFlexCTokenMaker {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int EOL_COMMENT = 6;
  public static final int DOCCOMMENT = 4;
  public static final int YYINITIAL = 0;
  public static final int MLC = 2;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3, 3
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\23\1\11\1\0\1\23\1\20\22\0\1\23\1\53\1\16"+
    "\1\21\1\22\1\53\1\55\1\10\2\77\1\25\1\46\1\45\1\34"+
    "\1\35\1\24\1\4\1\5\2\17\4\7\2\3\1\56\1\45\1\47"+
    "\1\50\1\52\1\54\1\76\1\6\1\27\1\6\1\67\1\33\1\32"+
    "\5\1\1\26\1\101\4\1\1\74\1\100\4\1\1\31\2\1\1\77"+
    "\1\12\1\77\1\51\1\2\1\0\1\41\1\30\1\63\1\61\1\40"+
    "\1\15\1\72\1\57\1\65\1\1\1\75\1\42\1\66\1\14\1\60"+
    "\1\62\1\1\1\37\1\43\1\36\1\13\1\71\1\70\1\64\1\73"+
    "\1\1\1\102\1\51\1\44\1\54\uff81\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\4\0\1\1\1\2\2\3\1\4\1\5\1\2\1\6"+
    "\1\1\1\7\3\10\1\2\1\11\1\2\5\10\1\2"+
    "\1\12\1\2\1\13\1\14\5\13\1\15\10\13\1\16"+
    "\3\13\1\1\2\17\1\20\1\3\1\17\1\20\2\17"+
    "\1\21\2\17\1\4\1\22\1\0\1\4\1\2\2\6"+
    "\1\23\1\24\1\25\1\0\1\10\1\2\1\12\1\2"+
    "\2\0\1\26\4\0\1\27\2\0\1\30\22\0\1\1"+
    "\1\3\1\20\1\0\2\21\1\3\1\21\1\4\1\31"+
    "\2\4\1\22\1\4\1\2\1\6\1\32\1\6\1\33"+
    "\1\2\1\1\1\2\37\0\1\1\2\17\1\4\1\2"+
    "\1\6\1\34\1\35\1\1\1\2\2\0\1\36\2\0"+
    "\1\37\10\0\1\40\17\0\1\41\1\1\1\4\1\6"+
    "\1\1\1\42\35\0\1\1\1\4\1\6\1\1\1\2"+
    "\22\0\1\1\1\2\2\0\1\40\6\0\1\2\11\0"+
    "\1\2\5\0\1\2\5\0\1\2\2\0\1\42";

  private static int [] zzUnpackAction() {
    int [] result = new int[292];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\103\0\206\0\311\0\u010c\0\u014f\0\u0192\0\u01d5"+
    "\0\u0218\0\u025b\0\u029e\0\u02e1\0\u025b\0\u0324\0\u0367\0\u03aa"+
    "\0\u03ed\0\u0430\0\u025b\0\u025b\0\u0473\0\u04b6\0\u04f9\0\u025b"+
    "\0\u053c\0\u057f\0\u05c2\0\u0605\0\u0648\0\u025b\0\u068b\0\u06ce"+
    "\0\u0711\0\u0754\0\u0797\0\u025b\0\u07da\0\u081d\0\u0860\0\u08a3"+
    "\0\u08e6\0\u0929\0\u096c\0\u09af\0\u025b\0\u09f2\0\u0a35\0\u0a78"+
    "\0\u0abb\0\u0afe\0\u0b41\0\u0afe\0\u0afe\0\u0b84\0\u0bc7\0\u0c0a"+
    "\0\u0c4d\0\u0c90\0\u0cd3\0\u0d16\0\u0d59\0\u025b\0\u0d9c\0\u0ddf"+
    "\0\u0e22\0\u0e65\0\u0ea8\0\u025b\0\u025b\0\u0eeb\0\u03aa\0\u0f2e"+
    "\0\u0f71\0\u0fb4\0\u0ff7\0\u103a\0\u107d\0\u025b\0\u10c0\0\u1103"+
    "\0\u1146\0\u1189\0\u025b\0\u11cc\0\u120f\0\u025b\0\u1252\0\u1295"+
    "\0\u12d8\0\u131b\0\u135e\0\u13a1\0\u13e4\0\u1427\0\u146a\0\u14ad"+
    "\0\u14f0\0\u1533\0\u1576\0\u15b9\0\u15fc\0\u163f\0\u1682\0\u16c5"+
    "\0\u1708\0\u174b\0\u178e\0\u17d1\0\u1814\0\u0afe\0\u1857\0\u189a"+
    "\0\u18dd\0\u025b\0\u1920\0\u1963\0\u0d9c\0\u19a6\0\u19e9\0\u1a2c"+
    "\0\u025b\0\u1a6f\0\u1ab2\0\u1af5\0\u1b38\0\u1b7b\0\u1bbe\0\u1c01"+
    "\0\u1c44\0\u1c87\0\u1cca\0\u1d0d\0\u1d50\0\u1d93\0\u1dd6\0\u1e19"+
    "\0\u1e5c\0\u1e9f\0\u1ee2\0\u1f25\0\u1f68\0\u1fab\0\u1fee\0\u2031"+
    "\0\u2074\0\u20b7\0\u20fa\0\u213d\0\u2180\0\u21c3\0\u2206\0\u2249"+
    "\0\u228c\0\u22cf\0\u2312\0\u2355\0\u2398\0\u23db\0\u1857\0\u241e"+
    "\0\u2461\0\u24a4\0\u24e7\0\u025b\0\u014f\0\u252a\0\u256d\0\u25b0"+
    "\0\u25f3\0\u2636\0\u2679\0\u26bc\0\u26ff\0\u2742\0\u2785\0\u27c8"+
    "\0\u280b\0\u284e\0\u2891\0\u28d4\0\u2917\0\u025b\0\u295a\0\u299d"+
    "\0\u29e0\0\u2a23\0\u2a66\0\u2aa9\0\u2aec\0\u2b2f\0\u2b72\0\u2bb5"+
    "\0\u2bf8\0\u2c3b\0\u2c7e\0\u2cc1\0\u2d04\0\u2d47\0\u2d8a\0\u2dcd"+
    "\0\u2e10\0\u2e53\0\u2e96\0\u2ed9\0\u2636\0\u2f1c\0\u26ff\0\u2f5f"+
    "\0\u2fa2\0\u2fe5\0\u3028\0\u306b\0\u30ae\0\u30f1\0\u3134\0\u3177"+
    "\0\u31ba\0\u31fd\0\u3240\0\u3283\0\u32c6\0\u3309\0\u334c\0\u338f"+
    "\0\u33d2\0\u3415\0\u3458\0\u349b\0\u34de\0\u3521\0\u3564\0\u2d47"+
    "\0\u35a7\0\u35ea\0\u362d\0\u3670\0\u36b3\0\u36f6\0\u3739\0\u377c"+
    "\0\u37bf\0\u3802\0\u3845\0\u3888\0\u38cb\0\u390e\0\u3951\0\u3994"+
    "\0\u39d7\0\u3a1a\0\u3a5d\0\u3aa0\0\u3ae3\0\u3b26\0\u3b69\0\u3bac"+
    "\0\u3bef\0\u3c32\0\u3c75\0\u3cb8\0\u3cfb\0\u3d3e\0\u3d81\0\u3dc4"+
    "\0\u3e07\0\u3e4a\0\u3e8d\0\u3ed0\0\u3f13\0\u3f56\0\u3f99\0\u3fdc"+
    "\0\u401f\0\u4062\0\u40a5\0\u40e8\0\u412b\0\u416e\0\u41b1\0\u41f4"+
    "\0\u4237\0\u427a\0\u42bd\0\u4300\0\u4343\0\u4386\0\u43c9\0\u440c"+
    "\0\u444f\0\u4492\0\u44d5\0\u014f";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[292];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\5\2\6\1\7\1\10\1\7\1\6\1\7\1\11"+
    "\1\12\1\5\2\6\1\13\1\14\1\7\1\15\1\5"+
    "\1\6\1\16\1\17\1\20\6\6\1\21\1\22\6\6"+
    "\1\23\1\24\1\25\1\26\2\20\1\27\1\20\1\30"+
    "\1\31\1\30\6\6\1\32\10\6\1\33\1\23\1\34"+
    "\1\6\1\23\11\35\1\36\3\35\1\37\7\35\1\40"+
    "\31\35\1\41\10\35\1\42\12\35\11\43\1\44\3\43"+
    "\1\45\7\43\1\46\21\43\1\47\7\43\1\50\10\43"+
    "\1\51\5\43\1\52\3\43\1\53\11\54\1\55\3\54"+
    "\1\56\41\54\1\57\10\54\1\60\12\54\10\5\2\0"+
    "\4\5\1\0\1\5\1\0\2\5\3\0\6\5\2\0"+
    "\6\5\13\0\20\5\1\0\2\5\1\0\1\5\7\6"+
    "\2\0\1\61\3\6\1\0\1\6\1\0\1\5\1\6"+
    "\3\0\6\6\2\0\6\6\13\0\17\6\1\5\1\0"+
    "\2\6\1\0\2\62\1\63\3\7\1\62\1\7\2\0"+
    "\3\62\1\64\1\0\1\7\1\0\2\62\3\0\1\65"+
    "\3\62\1\64\1\66\1\0\1\67\2\62\1\66\1\62"+
    "\1\65\1\62\13\0\2\62\1\64\5\62\1\64\7\62"+
    "\1\0\2\62\1\0\2\62\1\70\1\71\2\72\1\62"+
    "\1\72\2\0\3\62\1\64\1\0\1\72\1\0\2\62"+
    "\3\0\1\65\2\73\1\74\1\64\1\66\1\0\1\67"+
    "\2\62\1\66\1\62\1\65\1\62\13\0\2\62\1\64"+
    "\2\62\1\74\2\62\1\64\7\62\1\0\2\62\1\0"+
    "\10\75\1\76\1\77\1\100\70\75\103\0\1\5\7\6"+
    "\2\0\1\61\3\6\1\0\1\6\1\0\1\5\1\6"+
    "\3\0\6\6\2\0\6\6\13\0\6\6\1\101\10\6"+
    "\1\5\1\0\2\6\1\0\11\14\1\102\1\103\3\14"+
    "\1\104\64\14\23\0\1\16\103\0\1\105\1\106\22\0"+
    "\1\30\102\0\1\30\66\0\1\30\13\0\1\30\1\0"+
    "\1\30\33\0\3\67\1\0\1\67\7\0\1\67\131\0"+
    "\1\30\1\0\1\30\101\0\1\107\1\30\102\0\1\30"+
    "\1\0\1\110\100\0\1\30\4\0\1\30\25\0\1\5"+
    "\7\6\2\0\1\61\1\6\1\111\1\6\1\0\1\6"+
    "\1\0\1\5\1\6\3\0\6\6\2\0\6\6\13\0"+
    "\17\6\1\5\1\0\2\6\1\0\1\5\2\112\3\5"+
    "\1\112\1\5\2\0\1\5\3\112\1\0\1\5\1\0"+
    "\1\5\1\112\3\0\6\112\2\0\6\112\13\0\17\112"+
    "\1\5\1\0\2\112\1\0\1\5\7\6\2\0\1\61"+
    "\3\6\1\0\1\6\1\0\1\5\1\6\3\0\6\6"+
    "\2\0\1\113\5\6\13\0\17\6\1\5\1\0\2\6"+
    "\1\0\11\35\1\0\3\35\1\0\7\35\1\0\31\35"+
    "\1\0\10\35\1\0\12\35\36\0\1\114\26\0\1\115"+
    "\41\0\1\116\114\0\1\117\134\0\1\120\12\0\11\43"+
    "\1\0\3\43\1\0\7\43\1\0\21\43\1\0\7\43"+
    "\1\0\10\43\1\0\5\43\1\0\3\43\37\0\1\121"+
    "\26\0\1\122\41\0\1\123\57\0\1\124\4\0\1\124"+
    "\4\0\3\124\6\0\1\125\1\0\6\124\2\0\6\124"+
    "\6\0\1\126\4\0\17\124\2\0\2\124\37\0\1\127"+
    "\134\0\1\130\50\0\1\131\1\132\1\133\1\134\1\0"+
    "\1\135\14\0\1\136\1\137\1\140\1\141\1\0\1\142"+
    "\3\0\1\143\107\0\1\144\4\0\11\54\1\0\3\54"+
    "\1\0\41\54\1\0\10\54\1\0\12\54\36\0\1\145"+
    "\26\0\1\146\53\0\1\147\134\0\1\150\12\0\10\5"+
    "\2\0\1\5\1\151\2\5\1\0\1\5\1\0\2\5"+
    "\3\0\6\5\2\0\6\5\13\0\20\5\1\0\2\5"+
    "\1\0\10\62\2\0\4\62\1\0\1\62\1\0\2\62"+
    "\3\0\6\62\2\0\6\62\13\0\20\62\1\0\2\62"+
    "\1\0\2\62\1\63\3\152\1\62\1\152\2\0\4\62"+
    "\1\0\1\152\1\0\2\62\3\0\6\62\2\0\6\62"+
    "\13\0\20\62\1\0\2\62\1\0\3\62\3\153\1\62"+
    "\1\153\2\0\4\62\1\0\1\153\1\0\2\62\3\0"+
    "\6\62\1\154\1\0\6\62\2\0\1\154\10\0\20\62"+
    "\1\0\2\62\1\0\3\62\3\67\1\62\1\67\2\0"+
    "\3\62\1\64\1\0\1\67\1\0\2\62\3\0\4\62"+
    "\1\64\1\66\2\0\2\62\1\66\3\62\13\0\2\62"+
    "\1\64\5\62\1\64\7\62\1\0\2\62\1\0\2\62"+
    "\1\70\1\62\2\155\1\62\1\155\2\0\4\62\1\0"+
    "\1\155\1\0\2\62\3\0\6\62\2\0\6\62\13\0"+
    "\20\62\1\0\2\62\1\0\3\62\3\71\1\62\1\71"+
    "\2\0\3\62\1\64\1\0\1\71\1\0\2\62\3\0"+
    "\4\62\1\64\1\66\1\0\1\67\2\62\1\66\3\62"+
    "\13\0\2\62\1\64\5\62\1\64\7\62\1\0\2\62"+
    "\1\0\2\62\1\70\1\71\2\72\1\62\1\72\2\0"+
    "\3\62\1\64\1\0\1\72\1\0\2\62\3\0\1\156"+
    "\3\62\1\64\1\66\1\0\1\67\2\62\1\66\1\62"+
    "\1\156\1\62\13\0\2\62\1\64\5\62\1\64\7\62"+
    "\1\0\2\62\1\0\4\62\2\157\2\62\2\0\4\62"+
    "\1\0\1\62\1\0\2\62\3\0\6\62\2\0\6\62"+
    "\13\0\20\62\1\0\2\62\1\0\3\62\5\160\2\0"+
    "\3\62\1\160\1\0\1\160\1\0\2\62\3\0\1\62"+
    "\2\160\1\62\2\160\2\0\2\62\2\160\2\62\13\0"+
    "\2\62\1\160\1\62\1\160\3\62\1\160\7\62\1\0"+
    "\2\62\1\0\10\161\1\162\1\0\71\161\10\0\1\162"+
    "\72\0\4\161\2\163\1\161\1\164\1\165\1\0\1\75"+
    "\1\166\3\75\1\163\10\161\1\75\5\161\2\75\43\161"+
    "\1\5\7\6\2\0\1\61\1\6\1\167\1\6\1\0"+
    "\1\6\1\0\1\5\1\6\3\0\6\6\2\0\6\6"+
    "\13\0\17\6\1\5\1\0\2\6\1\0\12\102\1\170"+
    "\3\102\1\171\70\102\2\14\1\102\2\14\1\0\1\14"+
    "\1\172\4\14\10\102\1\14\5\102\2\14\43\102\25\0"+
    "\1\173\125\0\1\30\1\0\1\20\30\0\1\5\7\6"+
    "\2\0\1\61\3\6\1\0\1\6\1\0\1\5\1\6"+
    "\3\0\6\6\2\0\6\6\13\0\6\6\1\174\10\6"+
    "\1\5\1\0\2\6\1\0\1\5\7\112\2\0\1\175"+
    "\3\112\1\0\1\112\1\0\1\5\1\112\3\0\6\112"+
    "\2\0\6\112\13\0\17\112\1\5\1\0\2\112\1\0"+
    "\1\5\7\6\2\0\1\61\3\6\1\0\1\6\1\0"+
    "\1\5\1\6\3\0\6\6\2\0\3\6\1\176\2\6"+
    "\13\0\17\6\1\5\1\0\2\6\63\0\1\177\62\0"+
    "\1\200\76\0\1\201\134\0\1\202\74\0\1\203\62\0"+
    "\1\204\40\0\52\124\1\126\30\124\1\0\1\124\4\0"+
    "\1\124\4\0\3\124\10\0\6\124\2\0\6\124\6\0"+
    "\1\126\4\0\17\124\2\0\2\124\37\0\1\205\134\0"+
    "\1\206\25\0\1\207\43\0\1\210\1\211\62\0\1\212"+
    "\126\0\1\213\31\0\1\214\127\0\1\215\24\0\1\216"+
    "\45\0\1\217\112\0\1\220\103\0\1\221\102\0\1\222"+
    "\55\0\1\223\126\0\1\224\104\0\1\225\16\0\1\226"+
    "\1\0\1\227\1\0\1\230\3\0\1\231\73\0\1\232"+
    "\62\0\1\233\76\0\1\234\134\0\1\235\12\0\3\5"+
    "\5\236\2\0\3\5\1\236\1\0\1\236\1\0\2\5"+
    "\3\0\1\5\2\236\1\5\2\236\2\0\2\5\2\236"+
    "\2\5\13\0\2\5\1\236\1\5\1\236\3\5\1\236"+
    "\7\5\1\0\2\5\1\0\2\62\1\63\3\152\1\62"+
    "\1\152\2\0\4\62\1\0\1\152\1\0\2\62\3\0"+
    "\1\65\5\62\2\0\4\62\1\65\1\62\13\0\20\62"+
    "\1\0\2\62\1\0\3\62\3\153\1\62\1\153\2\0"+
    "\3\62\1\64\1\0\1\153\1\0\2\62\3\0\4\62"+
    "\1\64\1\62\2\0\6\62\13\0\2\62\1\64\5\62"+
    "\1\64\7\62\1\0\2\62\4\0\3\153\1\0\1\153"+
    "\7\0\1\153\63\0\2\62\1\70\1\62\2\155\1\62"+
    "\1\155\2\0\4\62\1\0\1\155\1\0\2\62\3\0"+
    "\1\156\5\62\2\0\4\62\1\156\1\62\13\0\20\62"+
    "\1\0\2\62\1\0\2\62\1\237\1\62\2\157\2\62"+
    "\2\0\4\62\1\0\1\62\1\0\2\62\3\0\6\62"+
    "\2\0\6\62\13\0\20\62\1\0\2\62\1\0\2\62"+
    "\1\240\5\160\2\0\3\62\1\160\1\0\1\160\1\0"+
    "\2\62\3\0\1\156\2\160\1\62\2\160\2\0\2\62"+
    "\2\160\1\156\1\62\13\0\2\62\1\160\1\62\1\160"+
    "\3\62\1\160\7\62\1\0\2\62\1\0\10\161\1\76"+
    "\1\0\75\161\2\164\1\161\1\164\1\162\1\0\5\161"+
    "\1\164\67\161\2\75\1\161\1\75\1\162\1\0\5\161"+
    "\1\75\66\161\5\241\1\76\1\0\3\161\1\241\1\161"+
    "\1\241\7\161\2\241\1\161\2\241\4\161\2\241\17\161"+
    "\1\241\1\161\1\241\3\161\1\241\13\161\1\5\7\6"+
    "\2\0\1\61\3\6\1\0\1\6\1\0\1\5\1\6"+
    "\3\0\6\6\2\0\3\6\1\242\2\6\13\0\17\6"+
    "\1\5\1\0\2\6\1\0\11\102\1\0\74\102\5\243"+
    "\2\102\1\170\2\102\1\243\1\171\1\243\7\102\2\243"+
    "\1\102\2\243\4\102\2\243\17\102\1\243\1\102\1\243"+
    "\3\102\1\243\13\102\24\0\1\244\56\0\1\5\7\6"+
    "\2\0\1\61\3\6\1\0\1\6\1\0\1\5\1\6"+
    "\3\0\6\6\2\0\1\245\5\6\13\0\17\6\1\5"+
    "\1\0\2\6\1\0\10\5\2\0\1\5\1\246\2\5"+
    "\1\0\1\5\1\0\2\5\3\0\6\5\2\0\6\5"+
    "\13\0\20\5\1\0\2\5\1\0\1\5\7\6\2\0"+
    "\1\61\3\6\1\0\1\6\1\0\1\5\1\6\3\0"+
    "\6\6\2\0\1\247\5\6\13\0\17\6\1\5\1\0"+
    "\2\6\57\0\1\250\64\0\1\177\124\0\1\251\55\0"+
    "\1\252\123\0\1\253\64\0\1\203\124\0\1\254\55\0"+
    "\1\255\103\0\1\256\103\0\1\257\124\0\1\260\57\0"+
    "\1\261\105\0\1\262\21\0\1\263\55\0\1\264\103\0"+
    "\1\265\1\266\56\0\1\267\131\0\1\270\121\0\1\271"+
    "\57\0\1\272\101\0\1\273\102\0\1\274\22\0\1\275"+
    "\60\0\1\276\130\0\1\277\75\0\1\300\102\0\1\301"+
    "\36\0\1\302\127\0\1\303\117\0\1\304\64\0\1\232"+
    "\124\0\1\305\55\0\1\306\45\0\3\5\5\307\2\0"+
    "\3\5\1\307\1\0\1\307\1\0\2\5\3\0\1\5"+
    "\2\307\1\5\2\307\2\0\2\5\2\307\2\5\13\0"+
    "\2\5\1\307\1\5\1\307\3\5\1\307\7\5\1\0"+
    "\2\5\1\0\2\62\1\240\5\160\2\0\3\62\1\160"+
    "\1\0\1\160\1\0\2\62\3\0\1\62\2\160\1\62"+
    "\2\160\2\0\2\62\2\160\2\62\13\0\2\62\1\160"+
    "\1\62\1\160\3\62\1\160\7\62\1\0\2\62\1\0"+
    "\3\161\5\310\1\76\1\0\3\161\1\310\1\161\1\310"+
    "\7\161\2\310\1\161\2\310\4\161\2\310\17\161\1\310"+
    "\1\161\1\310\3\161\1\310\13\161\1\5\7\6\2\0"+
    "\1\61\3\6\1\0\1\6\1\0\1\5\1\6\3\0"+
    "\6\6\2\0\4\6\1\245\1\6\13\0\17\6\1\5"+
    "\1\0\2\6\1\0\3\102\5\311\2\102\1\170\2\102"+
    "\1\311\1\171\1\311\7\102\2\311\1\102\2\311\4\102"+
    "\2\311\17\102\1\311\1\102\1\311\3\102\1\311\13\102"+
    "\3\5\5\312\2\0\3\5\1\312\1\0\1\312\1\0"+
    "\2\5\3\0\1\5\2\312\1\5\2\312\2\0\2\5"+
    "\2\312\2\5\13\0\2\5\1\312\1\5\1\312\3\5"+
    "\1\312\7\5\1\0\2\5\1\0\1\5\7\6\2\0"+
    "\1\61\3\6\1\0\1\6\1\0\1\5\1\6\3\0"+
    "\6\6\2\0\2\6\1\313\3\6\13\0\17\6\1\5"+
    "\1\0\2\6\25\0\1\314\121\0\1\177\12\0\1\250"+
    "\25\0\1\252\1\315\5\252\1\315\2\0\3\252\1\0"+
    "\1\252\1\0\1\315\1\252\1\0\1\252\1\315\6\252"+
    "\2\315\6\252\1\0\2\315\1\0\1\315\2\0\4\315"+
    "\17\252\2\315\2\252\25\0\1\316\121\0\1\203\12\0"+
    "\1\253\25\0\1\255\1\317\5\255\1\317\2\0\3\255"+
    "\1\0\1\255\1\0\1\317\1\255\1\0\1\255\1\317"+
    "\6\255\2\317\6\255\1\0\2\317\1\0\1\317\2\0"+
    "\4\317\17\255\2\317\2\255\61\0\1\320\62\0\1\321"+
    "\17\0\1\322\102\0\1\266\35\0\1\323\155\0\1\324"+
    "\54\0\1\325\1\0\1\326\117\0\1\327\110\0\1\330"+
    "\100\0\1\331\77\0\1\332\61\0\1\333\104\0\1\334"+
    "\101\0\1\335\102\0\1\336\102\0\1\337\105\0\1\340"+
    "\53\0\1\341\21\0\1\342\127\0\1\343\100\0\1\344"+
    "\100\0\1\345\65\0\1\346\64\0\1\347\121\0\1\232"+
    "\12\0\1\304\25\0\1\306\1\350\5\306\1\350\2\0"+
    "\3\306\1\0\1\306\1\0\1\350\1\306\1\0\1\306"+
    "\1\350\6\306\2\350\6\306\1\0\2\350\1\0\1\350"+
    "\2\0\4\350\17\306\2\350\2\306\1\0\3\5\5\351"+
    "\2\0\3\5\1\351\1\0\1\351\1\0\2\5\3\0"+
    "\1\5\2\351\1\5\2\351\2\0\2\5\2\351\2\5"+
    "\13\0\2\5\1\351\1\5\1\351\3\5\1\351\7\5"+
    "\1\0\2\5\1\0\3\161\5\352\1\76\1\0\3\161"+
    "\1\352\1\161\1\352\7\161\2\352\1\161\2\352\4\161"+
    "\2\352\17\161\1\352\1\161\1\352\3\161\1\352\13\161"+
    "\3\102\5\353\2\102\1\170\2\102\1\353\1\171\1\353"+
    "\7\102\2\353\1\102\2\353\4\102\2\353\17\102\1\353"+
    "\1\102\1\353\3\102\1\353\13\102\3\5\5\354\2\0"+
    "\3\5\1\354\1\0\1\354\1\0\2\5\3\0\1\5"+
    "\2\354\1\5\2\354\2\0\2\5\2\354\2\5\13\0"+
    "\2\5\1\354\1\5\1\354\3\5\1\354\7\5\1\0"+
    "\2\5\1\0\1\5\7\6\2\0\1\61\3\6\1\0"+
    "\1\6\1\0\1\5\1\6\3\0\6\6\2\0\6\6"+
    "\13\0\17\6\1\5\1\0\1\6\1\355\25\0\1\252"+
    "\102\0\1\255\115\0\1\356\104\0\1\357\131\0\1\360"+
    "\51\0\1\361\125\0\1\362\102\0\1\363\33\0\1\364"+
    "\147\0\1\365\63\0\1\366\101\0\1\266\104\0\1\367"+
    "\100\0\1\370\130\0\1\266\106\0\1\371\47\0\1\372"+
    "\127\0\1\266\103\0\1\373\112\0\1\374\45\0\1\375"+
    "\136\0\1\376\46\0\1\374\102\0\1\377\55\0\1\344"+
    "\113\0\1\306\56\0\3\5\5\6\2\0\3\5\1\6"+
    "\1\0\1\6\1\0\2\5\3\0\1\5\2\6\1\5"+
    "\2\6\2\0\2\5\2\6\2\5\13\0\2\5\1\6"+
    "\1\5\1\6\3\5\1\6\7\5\1\0\2\5\1\0"+
    "\3\161\5\75\1\76\1\0\3\161\1\75\1\161\1\75"+
    "\7\161\2\75\1\161\2\75\4\161\2\75\17\161\1\75"+
    "\1\161\1\75\3\161\1\75\13\161\3\102\5\14\2\102"+
    "\1\170\2\102\1\14\1\171\1\14\7\102\2\14\1\102"+
    "\2\14\4\102\2\14\17\102\1\14\1\102\1\14\3\102"+
    "\1\14\13\102\3\5\5\u0100\2\0\3\5\1\u0100\1\0"+
    "\1\u0100\1\0\2\5\3\0\1\5\2\u0100\1\5\2\u0100"+
    "\2\0\2\5\2\u0100\2\5\13\0\2\5\1\u0100\1\5"+
    "\1\u0100\3\5\1\u0100\7\5\1\0\2\5\1\0\1\5"+
    "\7\6\2\0\1\61\3\6\1\0\1\6\1\0\1\5"+
    "\1\6\3\0\6\6\2\0\3\6\1\u0101\2\6\13\0"+
    "\17\6\1\5\1\0\2\6\66\0\1\u0102\76\0\1\u0103"+
    "\64\0\1\266\53\0\1\266\130\0\1\331\76\0\1\340"+
    "\125\0\1\331\60\0\1\266\105\0\1\u0104\100\0\1\u0105"+
    "\125\0\1\u0106\77\0\1\u0107\36\0\1\u0102\146\0\1\361"+
    "\22\0\44\374\1\266\36\374\37\0\1\u0108\123\0\1\u0109"+
    "\61\0\1\u010a\43\0\3\5\5\112\2\0\3\5\1\112"+
    "\1\0\1\112\1\0\2\5\3\0\1\5\2\112\1\5"+
    "\2\112\2\0\2\5\2\112\2\5\13\0\2\5\1\112"+
    "\1\5\1\112\3\5\1\112\7\5\1\0\2\5\1\0"+
    "\1\5\7\6\2\0\1\61\3\6\1\0\1\6\1\0"+
    "\1\5\1\6\3\0\6\6\2\0\6\6\13\0\4\6"+
    "\1\u010b\12\6\1\5\1\0\2\6\42\0\1\u010c\104\0"+
    "\1\u010d\71\0\1\u010e\34\0\1\u010f\51\0\1\331\105\0"+
    "\1\u0110\100\0\1\u0111\104\0\1\u0112\121\0\1\u0113\107\0"+
    "\1\u0114\15\0\1\5\7\6\2\0\1\61\3\6\1\0"+
    "\1\6\1\0\1\5\1\6\3\0\6\6\2\0\6\6"+
    "\13\0\1\u0115\16\6\1\5\1\0\2\6\43\0\1\266"+
    "\101\0\1\u0116\126\0\1\u0117\56\0\1\u0118\77\0\1\u0119"+
    "\137\0\1\266\51\0\1\374\76\0\1\374\102\0\1\u011a"+
    "\44\0\1\5\7\6\2\0\1\61\3\6\1\0\1\6"+
    "\1\0\1\5\1\6\3\0\6\6\2\0\6\6\13\0"+
    "\6\6\1\u011b\10\6\1\5\1\0\2\6\16\0\1\u011c"+
    "\125\0\1\u011d\100\0\1\u011e\104\0\1\u011f\131\0\1\u0120"+
    "\13\0\1\5\7\6\2\0\1\61\1\6\1\u0121\1\6"+
    "\1\0\1\6\1\0\1\5\1\6\3\0\6\6\2\0"+
    "\6\6\13\0\17\6\1\5\1\0\2\6\41\0\1\u0122"+
    "\104\0\1\u011f\101\0\1\266\122\0\1\266\101\0\1\u0123"+
    "\22\0\1\5\7\6\2\0\1\61\3\6\1\0\1\6"+
    "\1\0\1\5\1\6\3\0\6\6\2\0\2\6\1\u0124"+
    "\3\6\13\0\17\6\1\5\1\0\2\6\37\0\1\u0111"+
    "\127\0\1\374\17\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[17688];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\4\0\5\1\1\11\2\1\1\11\5\1\2\11\3\1"+
    "\1\11\5\1\1\11\5\1\1\11\10\1\1\11\20\1"+
    "\1\11\1\0\4\1\2\11\1\1\1\0\4\1\2\0"+
    "\1\11\4\0\1\11\2\0\1\11\22\0\3\1\1\0"+
    "\5\1\1\11\6\1\1\11\5\1\37\0\6\1\1\11"+
    "\3\1\2\0\1\1\2\0\1\1\10\0\1\11\17\0"+
    "\6\1\35\0\5\1\22\0\2\1\2\0\1\1\6\0"+
    "\1\1\11\0\1\1\5\0\1\1\5\0\1\1\2\0"+
    "\1\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[292];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[]; // = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */


	/**
	 * Constructor.  This must be here because JFlex does not generate a
	 * no-parameter constructor.
	 */
	public ThingMLTokenMaker() {
	}


	/**
	 * Adds the token specified to the current linked list of tokens.
	 *
	 * @param tokenType The token's type.
	 * @see #addToken(int, int, int)
	 */
	private void addHyperlinkToken(int start, int end, int tokenType) {
		int so = start + offsetShift;
		addToken(zzBuffer, start,end, tokenType, so, true);
	}


	/**
	 * Adds the token specified to the current linked list of tokens.
	 *
	 * @param tokenType The token's type.
	 */
	private void addToken(int tokenType) {
		addToken(zzStartRead, zzMarkedPos-1, tokenType);
	}


	/**
	 * Adds the token specified to the current linked list of tokens.
	 *
	 * @param tokenType The token's type.
	 * @see #addHyperlinkToken(int, int, int)
	 */
	private void addToken(int start, int end, int tokenType) {
		int so = start + offsetShift;
		addToken(zzBuffer, start,end, tokenType, so, false);
	}


	/**
	 * Adds the token specified to the current linked list of tokens.
	 *
	 * @param array The character array.
	 * @param start The starting offset in the array.
	 * @param end The ending offset in the array.
	 * @param tokenType The token's type.
	 * @param startOffset The offset in the document at which this token
	 *                    occurs.
	 * @param hyperlink Whether this token is a hyperlink.
	 */
	public void addToken(char[] array, int start, int end, int tokenType,
						int startOffset, boolean hyperlink) {
		super.addToken(array, start,end, tokenType, startOffset, hyperlink);
		zzStartRead = zzMarkedPos;
	}


	/**
	 * Returns the text to place at the beginning and end of a
	 * line to "comment" it in a this programming language.
	 *
	 * @return The start and end strings to add to a line to "comment"
	 *         it out.
	 */
	public String[] getLineCommentStartAndEnd() {
		return new String[] { "//", null };
	}


	/**
	 * Returns the first token in the linked list of tokens generated
	 * from <code>text</code>.  This method must be implemented by
	 * subclasses so they can correctly implement syntax highlighting.
	 *
	 * @param text The text from which to get tokens.
	 * @param initialTokenType The token type we should start with.
	 * @param startOffset The offset into the document at which
	 *        <code>text</code> starts.
	 * @return The first <code>Token</code> in a linked list representing
	 *         the syntax highlighted text.
	 */
	public Token getTokenList(Segment text, int initialTokenType, int startOffset) {

		resetTokenList();
		this.offsetShift = -text.offset + startOffset;

		// Start off in the proper state.
		int state = Token.NULL;
		switch (initialTokenType) {
			case Token.COMMENT_MULTILINE:
				state = MLC;
				start = text.offset;
				break;
			case Token.COMMENT_DOCUMENTATION:
				state = DOCCOMMENT;
				start = text.offset;
				break;
			default:
				state = Token.NULL;
		}

		s = text;
		try {
			yyreset(zzReader);
			yybegin(state);
			return yylex();
		} catch (IOException ioe) {
			ioe.printStackTrace();
			return new DefaultToken();
		}

	}


	/**
	 * Refills the input buffer.
	 *
	 * @return      <code>true</code> if EOF was reached, otherwise
	 *              <code>false</code>.
	 * @exception   IOException  if any I/O-Error occurs.
	 */
	
	private boolean zzRefill() throws java.io.IOException {
		return zzCurrentPos>=s.offset+s.count;
	}


	/**
	 * Resets the scanner to read from a new input stream.
	 * Does not close the old reader.
	 *
	 * All internal variables are reset, the old input stream 
	 * <b>cannot</b> be reused (internal buffer is discarded and lost).
	 * Lexical state is set to <tt>YY_INITIAL</tt>.
	 *
	 * @param reader   the new input stream 
	 */
	public final void yyreset(java.io.Reader reader) throws java.io.IOException {
		// 's' has been updated.
		zzBuffer = s.array;
		/*
		 * We replaced the line below with the two below it because zzRefill
		 * no longer "refills" the buffer (since the way we do it, it's always
		 * "full" the first time through, since it points to the segment's
		 * array).  So, we assign zzEndRead here.
		 */
		//zzStartRead = zzEndRead = s.offset;
		zzStartRead = s.offset;
		zzEndRead = zzStartRead + s.count - 1;
		zzCurrentPos = zzMarkedPos = s.offset;
		zzLexicalState = YYINITIAL;
		zzReader = reader;
		zzAtEOF  = false;
	}




  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public ThingMLTokenMaker(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public ThingMLTokenMaker(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 172) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }
    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }

  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public org.fife.ui.rsyntaxtextarea.Token yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 31: 
          { int temp=zzStartRead; addToken(start,zzStartRead-1, Token.COMMENT_DOCUMENTATION); addHyperlinkToken(temp,zzMarkedPos-1, Token.COMMENT_DOCUMENTATION); start = zzMarkedPos;
          }
        case 35: break;
        case 20: 
          { start = zzMarkedPos-2; 					yybegin(EOL_COMMENT);
          }
        case 36: break;
        case 5: 
          { addNullToken(); return firstToken;
          }
        case 37: break;
        case 32: 
          { int temp=zzStartRead; addToken(start,zzStartRead-1, Token.COMMENT_DOCUMENTATION); addToken(temp,zzMarkedPos-1, Token.COMMENT_KEYWORD); start = zzMarkedPos;
          }
        case 38: break;
        case 25: 
          { addToken(Token.LITERAL_CHAR);
          }
        case 39: break;
        case 22: 
          { yybegin(YYINITIAL); addToken(start,zzStartRead+1, Token.COMMENT_MULTILINE);
          }
        case 40: break;
        case 28: 
          { addToken(Token.COMMENT_MULTILINE);
          }
        case 41: break;
        case 21: 
          { start = zzMarkedPos-2; yybegin(MLC);
          }
        case 42: break;
        case 7: 
          { addToken(Token.WHITESPACE);
          }
        case 43: break;
        case 17: 
          { addToken(Token.LITERAL_NUMBER_HEXADECIMAL);
          }
        case 44: break;
        case 26: 
          { addToken(Token.ERROR_STRING_DOUBLE);
          }
        case 45: break;
        case 16: 
          { addToken(Token.LITERAL_NUMBER_FLOAT);
          }
        case 46: break;
        case 29: 
          { addToken(Token.RESERVED_WORD);
          }
        case 47: break;
        case 9: 
          { addToken(Token.SEPARATOR);
          }
        case 48: break;
        case 2: 
          { addToken(Token.IDENTIFIER);
          }
        case 49: break;
        case 14: 
          { addToken(start,zzStartRead-1, Token.COMMENT_EOL); addNullToken(); return firstToken;
          }
        case 50: break;
        case 34: 
          { addToken(Token.FUNCTION);
          }
        case 51: break;
        case 4: 
          { addToken(Token.ERROR_CHAR); addNullToken(); return firstToken;
          }
        case 52: break;
        case 6: 
          { addToken(Token.ERROR_STRING_DOUBLE); addNullToken(); return firstToken;
          }
        case 53: break;
        case 1: 
          { addToken(Token.ERROR_IDENTIFIER);
          }
        case 54: break;
        case 18: 
          { addToken(Token.ERROR_CHAR);
          }
        case 55: break;
        case 13: 
          { addToken(start,zzStartRead-1, Token.COMMENT_DOCUMENTATION); return firstToken;
          }
        case 56: break;
        case 10: 
          { addToken(Token.ANNOTATION);
          }
        case 57: break;
        case 27: 
          { start = zzMarkedPos-3; yybegin(DOCCOMMENT);
          }
        case 58: break;
        case 19: 
          { addToken(Token.LITERAL_STRING_DOUBLE_QUOTE);
          }
        case 59: break;
        case 33: 
          { int temp=zzStartRead; addToken(start,zzStartRead-1, Token.COMMENT_EOL); addHyperlinkToken(temp,zzMarkedPos-1, Token.COMMENT_EOL); start = zzMarkedPos;
          }
        case 60: break;
        case 24: 
          { int temp=zzStartRead; addToken(start,zzStartRead-1, Token.COMMENT_DOCUMENTATION); addToken(temp,zzMarkedPos-1, Token.COMMENT_MARKUP); start = zzMarkedPos;
          }
        case 61: break;
        case 30: 
          { int temp=zzStartRead; addToken(start,zzStartRead-1, Token.COMMENT_MULTILINE); addHyperlinkToken(temp,zzMarkedPos-1, Token.COMMENT_MULTILINE); start = zzMarkedPos;
          }
        case 62: break;
        case 23: 
          { yybegin(YYINITIAL); addToken(start,zzStartRead+1, Token.COMMENT_DOCUMENTATION);
          }
        case 63: break;
        case 15: 
          { addToken(Token.ERROR_NUMBER_FORMAT);
          }
        case 64: break;
        case 3: 
          { addToken(Token.LITERAL_NUMBER_DECIMAL_INT);
          }
        case 65: break;
        case 8: 
          { addToken(Token.OPERATOR);
          }
        case 66: break;
        case 11: 
          { 
          }
        case 67: break;
        case 12: 
          { addToken(start,zzStartRead-1, Token.COMMENT_MULTILINE); return firstToken;
          }
        case 68: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            switch (zzLexicalState) {
            case EOL_COMMENT: {
              addToken(start,zzStartRead-1, Token.COMMENT_EOL); addNullToken(); return firstToken;
            }
            case 293: break;
            case DOCCOMMENT: {
              yybegin(YYINITIAL); addToken(start,zzEndRead, Token.COMMENT_DOCUMENTATION); return firstToken;
            }
            case 294: break;
            case YYINITIAL: {
              addNullToken(); return firstToken;
            }
            case 295: break;
            case MLC: {
              addToken(start,zzStartRead-1, Token.COMMENT_MULTILINE); return firstToken;
            }
            case 296: break;
            default:
            return null;
            }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
